import { defineStore } from "pinia";
import { ref, reactive, computed } from "vue";
import { Niivue } from "@niivue/niivue";

export const useToolStore = defineStore("tool", () => {
    // 初始化渲染器
    var nv = reactive({});
    function nvInit() {
        nv = new Niivue({
            textHeight: 0.08,
            fontColor: [1, 0, 0, 1],
            loadingText: "waiting on images...",
            dragAndDropEnabled: false,
            dragMode: 1,
            isCornerOrientationText: false,
            multiplanarPadPixels: 50,
            sagittalNoseLeft: true,
            multiplanarForceRender: true,
            onLocationChange: getVolumeMsg
        })
        nv.setSliceMM(true);

        //nv.setClipPlaneColor([1, 1, 1]);
        //nv.setClipPlane([42, 42]);
        return nv;
    }

    var VolumeMsg = reactive({ value: "", MM: "", vox: "", str: "" });
    function getVolumeMsg(data) {
        //console.log(data)
        let values = data.values[0]
        VolumeMsg.value = values.value.toFixed(2)
        VolumeMsg.MM = parseInt(values.mm[0]) + " , " + parseInt(values.mm[1]) + " , " + parseInt(values.mm[2]);
        VolumeMsg.vox = values.vox[0] + " , " + values.vox[1] + " , " + values.vox[2];
    }

    //对应视图选择   默认是全部展示 
    let viewvalue = ref(5)
    //let viewRef = ref(null)

    function changeView() {
        //设置切片类型，改变视图模式 
        switch (viewvalue.value) {
            case 5:
                nv.opts.multiplanarForceRender = true
                nv.setSliceType(3)
                break
            case 3:
                nv.opts.multiplanarForceRender = false
                nv.setSliceType(3)
                break

            default:
                nv.setSliceType(viewvalue.value)
                break
        }
    }

    //控制在3D视图下的视角转换
    const planevalue = ref(0)
    let planeObj = [2, 0, 0]
    function changeClipPlane() {

        switch (planevalue.value) {
            case 0:
                planeObj = [2, 0, 0]
                break
            case 1:
                planeObj = [0, 270, 0]
                break
            case 2:
                planeObj = [0, 0, 0]
                break
            case 3:
                planeObj = [0, 0, 90]
                break
        }
        // //[0,270,0] 左  [0,0,0] 前  [0,0,90] 上  [2,0,0] none
        nv.setClipPlane(planeObj)
    }

    //控制3D方向立方体的显示
    const value_OrientCube = ref(false)
    function show_OrientCube() {
        nv.opts.isOrientCube = value_OrientCube.value
        nv.updateGLVolume()
    }

    // 控制3D十字线的渲染
    const value_3DHair = ref(false)
    function show_3DHair() {
        nv.opts.show3Dcrosshair = value_3DHair.value
        nv.updateGLVolume()
    }

    const disabled = computed(() => {
        if (viewvalue.value == 4 || viewvalue.value == 5) return false
        else return true

    })


    //控制显示颜色条
    const value_colorbar = ref(false)
    function show_colorbar() {
        nv.opts.isColorbar = value_colorbar.value
        nv.updateGLVolume()
    }

    //控制10cm标尺
    const value_ruler = ref(false)
    function show_ruler() {
        nv.opts.isRuler = value_ruler.value
        nv.updateGLVolume()
    }

    //右键拖动功能选择
    let rigthclick_option = ref(1)
    function changerigthclick() {
        nv.opts.dragMode = rigthclick_option.value
        nv.updateGLVolume()
    }

    //绘图

    //是否绘图
    const ifdraw = ref(false)
    //是否填充
    const iffill = ref(true)
    //设置绘图颜色，默认为 red
    const pen_color = ref(1)
    //绘图透明度
    const drawOpacity = ref(0.7)
    //是否启用绘图
    function draw() {
        nv.setDrawingEnabled(ifdraw.value)
    }
    //改变绘图颜色以及是否填充
    function setColorFill() {
        nv.setPenValue(pen_color.value, iffill.value)
    }
    //绘图透明度调整
    function setOpacity() {
        nv.setDrawOpacity(drawOpacity.value)
    }
    const fileObject = ref([])
    function addFileObject(file) {
        if (fileObject.value.length == 0) {
            fileObject.value.push(file);
        } else {
            removeFileObject();
            fileObject.value.push(file);
        }
    }
    function removeFileObject() {
        fileObject.value.pop();
    }
    function getFileObject() {
        return fileObject.value;
    }


    // const R$T = [0, 43, 103, 199, 216, 255]
    //     , G$T = [0, 0, 37, 155, 213, 255]
    //     , B$T = [0, 0, 20, 97, 201, 255]
    //     , A$T = [0, 44, 48, 54, 56, 56]
    //     , I$T = [0, 64, 128, 196, 240, 255]
    //     , bronze = {
    //         R: R$T,
    //         G: G$T,
    //         B: B$T,
    //         A: A$T,
    //         I: I$T
    //     }

    //     , R$w = [0, 13, 21, 26, 27, 25, 22, 21, 22, 28, 39, 54, 75, 98, 124, 148, 171, 189, 202, 210, 213, 211, 206, 200, 195, 193, 195, 201, 211, 225, 240, 255]
    //     , G$w = [0, 5, 11, 20, 31, 44, 58, 72, 86, 99, 109, 116, 120, 122, 122, 122, 121, 121, 124, 129, 137, 147, 161, 175, 190, 205, 218, 229, 238, 245, 251, 255]
    //     , B$w = [0, 14, 30, 46, 61, 71, 77, 78, 75, 68, 60, 52, 48, 47, 53, 65, 83, 105, 131, 157, 183, 205, 222, 235, 241, 243, 242, 240, 239, 240, 245, 255]
    //     , A$w = [0, 4, 8, 12, 17, 21, 25, 29, 33, 37, 41, 45, 50, 54, 58, 62, 66, 70, 74, 78, 83, 87, 91, 95, 99, 103, 107, 111, 116, 120, 124, 128]
    //     , I$w = [0, 8, 16, 25, 33, 41, 49, 58, 66, 74, 82, 90, 99, 107, 115, 123, 132, 140, 148, 156, 165, 173, 181, 189, 197, 206, 214, 222, 230, 239, 247, 255]
    //     , cubehelix = {
    //         R: R$w,
    //         G: G$w,
    //         B: B$w,
    //         A: A$w,
    //         I: I$w
    //     }

    //     , R$s = [0, 142, 227, 255]
    //     , G$s = [0, 85, 170, 255]
    //     , B$s = [0, 14, 76, 255]
    //     , A$s = [0, 42, 84, 128]
    //     , I$s = [0, 85, 170, 255]
    //     , gold = {
    //         R: R$s,
    //         G: G$s,
    //         B: B$s,
    //         A: A$s,
    //         I: I$s
    //     }
    //     , R$r = [0, 255]
    //     , G$r = [0, 255]
    //     , B$r = [0, 255]
    //     , A$r = [0, 128]
    //     , I$r = [0, 255]
    //     , gray = {
    //         R: R$r,
    //         G: G$r,
    //         B: B$r,
    //         A: A$r,
    //         I: I$r
    //     }
    //     , R$q = [0, 0, 0]
    //     , G$q = [0, 128, 255]
    //     , B$q = [0, 0, 0]
    //     , A$q = [0, 64, 128]
    //     , I$q = [0, 128, 255]
    //     , green = {
    //         R: R$q,
    //         G: G$q,
    //         B: B$q,
    //         A: A$q,
    //         I: I$q
    //     }

    //     , R$n = [0, 255, 255, 255]
    //     , G$n = [0, 0, 126, 255]
    //     , B$n = [0, 0, 0, 255]
    //     , A$n = [0, 64, 96, 128]
    //     , I$n = [0, 128, 191, 255]
    //     , hotiron = {
    //         R: R$n,
    //         G: G$n,
    //         B: B$n,
    //         A: A$n,
    //         I: I$n
    //     }
    //     , R$m = [3, 255, 255, 255]
    //     , G$m = [0, 0, 255, 255]
    //     , B$m = [0, 0, 0, 255]
    //     , A$m = [0, 48, 96, 128]
    //     , I$m = [0, 95, 191, 255]
    //     , hot = {
    //         R: R$m,
    //         G: G$m,
    //         B: B$m,
    //         A: A$m,
    //         I: I$m
    //     }

    //     , R$j = [0, 0, 127, 255, 127]
    //     , G$j = [0, 127, 255, 127, 0]
    //     , B$j = [0, 255, 127, 0, 0]
    //     , A$j = [0, 32, 64, 96, 128]
    //     , I$j = [0, 63, 128, 192, 255]
    //     , jet = {
    //         R: R$j,
    //         G: G$j,
    //         B: B$j,
    //         A: A$j,
    //         I: I$j
    //     }


    //     , R$g = [0, 59, 55, 222]
    //     , G$g = [0, 45, 165, 245]
    //     , B$g = [0, 91, 172, 229]
    //     , A$g = [0, 23, 70, 107]
    //     , I$g = [0, 56, 167, 255]
    //     , mako = {
    //         R: R$g,
    //         G: G$g,
    //         B: B$g,
    //         A: A$g,
    //         I: I$g
    //     }

    //     , R$e = [0, 156, 237, 240]
    //     , G$e = [0, 23, 121, 249]
    //     , B$e = [0, 158, 83, 33]
    //     , A$e = [0, 56, 80, 88]
    //     , I$e = [0, 64, 192, 255]
    //     , plasma = {
    //         R: R$e,
    //         G: G$e,
    //         B: B$e,
    //         A: A$e,
    //         I: I$e
    //     }

    //     , R$c = [0, 128, 255]
    //     , G$c = [0, 0, 0]
    //     , B$c = [0, 0, 0]
    //     , A$c = [0, 64, 128]
    //     , I$c = [0, 128, 255]
    //     , red = {
    //         R: R$c,
    //         G: G$c,
    //         B: B$c,
    //         A: A$c,
    //         I: I$c
    //     }
    //     , R$3 = [3, 64, 0, 0, 255, 255, 255]
    //     , G$3 = [0, 0, 0, 255, 255, 192, 3]
    //     , B$3 = [0, 32, 48, 56, 64, 96, 128]
    //     , A$3 = [0, 8, 16, 24, 32, 52, 80]
    //     , I$3 = [0, 32, 64, 96, 160, 192, 255]
    //     , x_rain = {
    //         R: R$3,
    //         G: G$3,
    //         B: B$3,
    //         A: A$3,
    //         I: I$3
    //     }
    //     , min$1 = 0
    //     , max$1 = 0
    //     , R$2 = [0, 37]
    //     , G$2 = [0, 0]
    //     , B$2 = [0, 255]
    //     , A$2 = [0, 64]
    //     , I$2 = [0, 255]
    //     , afni_blues_inv = {
    //         min: min$1,
    //         max: max$1,
    //         R: R$2,
    //         G: G$2,
    //         B: B$2,
    //         A: A$2,
    //         I: I$2
    //     }
    //     , R$1 = [255, 255]
    //     , G$1 = [255, 11]
    //     , B$1 = [0, 0]
    //     , A$1 = [0, 64]
    //     , I$1 = [0, 255]
    //     , afni_reds_inv = {
    //         R: R$1,
    //         G: G$1,
    //         B: B$1,
    //         A: A$1,
    //         I: I$1
    //     }
    //     , min = 0
    //     , max = 0
    //     , R = [0, 10, 223, 120, 216, 207, 251, 93, 252, 217, 21, 253, 131, 165, 173, 143, 144, 217, 86, 89, 63, 254, 172, 1, 142, 107, 42, 78, 221, 8, 222, 71, 127, 126, 167, 33, 104, 2, 208, 216, 0, 251, 7, 105, 2, 101, 248, 190, 253, 62, 255, 224, 166, 37, 110, 138, 45, 34, 6, 37, 69, 201, 43, 122, 199, 37, 173, 194, 103, 211, 75, 159, 96, 4, 239, 98, 110, 193, 253, 166, 40, 255, 48, 130, 140, 243, 101, 9, 177, 220, 133, 32, 4, 81, 48, 48, 210, 109, 60, 132, 1, 119, 1, 159, 247, 33, 212, 187, 253, 144, 196, 254, 168, 79, 64, 196, 39, 97, 73, 173, 104, 216, 217, 43, 101, 119, 254, 5, 237, 103, 203, 122, 57, 87, 251, 164, 19, 75, 200, 2, 252, 150, 66, 0, 255, 157, 23, 254, 55, 16, 240, 161, 69, 253, 207, 195, 5, 60, 255, 251, 200, 217, 134, 123, 253, 180, 27, 246, 130, 136, 250, 232, 4, 125, 140, 22, 253, 255, 13, 180, 123, 61, 254, 111, 10, 185, 76, 192, 255, 223, 186, 61, 198, 5, 172, 13, 83, 172, 171, 6, 23, 73, 134, 133, 109, 61, 213, 55, 57, 132, 36, 209, 2, 144, 1, 253, 68, 155, 3, 160, 2, 77, 121, 70, 67, 176, 223, 131, 4, 162, 232, 255, 150, 94, 235, 191, 207, 10, 246, 0, 225, 4, 209, 116, 57, 112, 172, 253, 1, 6, 92, 227, 73, 62, 135, 223]
    //     , G = [0, 50, 112, 245, 4, 124, 176, 243, 56, 125, 183, 139, 182, 68, 189, 4, 225, 10, 20, 223, 7, 46, 31, 193, 225, 250, 219, 41, 2, 100, 83, 181, 34, 150, 72, 223, 168, 248, 80, 253, 7, 117, 214, 2, 248, 10, 3, 59, 179, 160, 90, 244, 146, 4, 207, 4, 125, 255, 96, 100, 1, 208, 130, 51, 116, 181, 236, 53, 244, 5, 165, 28, 181, 86, 96, 42, 254, 1, 134, 194, 214, 92, 41, 204, 137, 86, 207, 3, 143, 3, 100, 239, 164, 94, 65, 251, 131, 244, 173, 57, 143, 107, 217, 53, 210, 0, 148, 250, 45, 198, 81, 40, 61, 218, 252, 88, 171, 0, 248, 24, 248, 4, 41, 100, 187, 46, 208, 145, 43, 168, 121, 46, 175, 250, 125, 107, 233, 112, 207, 231, 174, 215, 53, 9, 43, 153, 52, 124, 128, 65, 210, 147, 255, 147, 63, 200, 148, 254, 0, 179, 241, 42, 239, 2, 230, 8, 82, 135, 87, 16, 3, 87, 86, 151, 254, 8, 255, 86, 53, 19, 7, 192, 171, 201, 253, 247, 197, 103, 251, 126, 0, 149, 54, 183, 61, 126, 79, 113, 10, 103, 184, 75, 11, 195, 222, 136, 149, 131, 8, 99, 240, 177, 252, 255, 198, 16, 7, 68, 178, 66, 191, 150, 73, 26, 211, 109, 78, 209, 240, 254, 1, 166, 247, 131, 2, 0, 167, 127, 133, 10, 43, 99, 235, 3, 214, 142, 176, 82, 132, 38, 10, 249, 255, 215, 44, 81]
    //     , B = [0, 182, 248, 37, 117, 35, 96, 69, 32, 152, 108, 20, 237, 250, 2, 89, 141, 216, 111, 251, 211, 149, 10, 44, 214, 103, 31, 251, 3, 32, 252, 246, 97, 1, 219, 167, 197, 4, 36, 116, 206, 118, 106, 43, 205, 204, 114, 69, 127, 205, 87, 80, 41, 251, 145, 204, 253, 161, 247, 1, 149, 9, 43, 253, 97, 72, 136, 161, 171, 181, 26, 255, 108, 80, 218, 214, 231, 255, 84, 31, 109, 4, 218, 3, 217, 36, 68, 85, 241, 39, 221, 2, 240, 2, 173, 42, 206, 5, 110, 46, 103, 27, 212, 184, 2, 207, 246, 45, 116, 72, 110, 253, 38, 105, 248, 159, 243, 81, 192, 93, 141, 145, 24, 157, 234, 131, 57, 178, 62, 75, 65, 176, 148, 40, 253, 66, 76, 240, 51, 154, 17, 251, 139, 253, 207, 9, 114, 49, 200, 254, 96, 73, 138, 118, 204, 102, 137, 89, 145, 161, 4, 112, 66, 234, 147, 178, 212, 205, 185, 11, 203, 131, 2, 250, 118, 169, 1, 185, 154, 53, 171, 197, 61, 175, 249, 96, 15, 254, 95, 5, 222, 75, 246, 194, 2, 61, 180, 25, 133, 165, 15, 233, 59, 35, 221, 140, 109, 7, 114, 255, 198, 0, 115, 168, 252, 23, 242, 80, 75, 142, 137, 255, 12, 182, 68, 201, 4, 111, 37, 228, 83, 248, 24, 192, 249, 5, 54, 223, 160, 122, 160, 114, 145, 119, 252, 31, 253, 250, 10, 214, 8, 47, 0, 142, 222, 70]
    //     , A = [0, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64]
    //     , I = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255]
    //     , ROI_i256 = {
    //         min,
    //         max,
    //         R,
    //         G,
    //         B,
    //         A,
    //         I
    //     }

    //colormap取值的字符串数组
    const colormaps = ref([])
    //colormap 的值
    const colormap = ref('gray')
    //nvImage的 id
    const nvImgId = ref('')

    //value 表示选择的colorMap的名字   id 为 nvImage的id
    // eval()  将js字符串转化为js语法
    function changeColorMap() {
       
        if (nv.canvas) {
            nv.volumes[0]._colormap = colormap.value;
            nv.updateGLVolume()
            //nv.setColormap(nvImgId.value, colormap.value)
        }
    }

    function saveImageNii() {
        nv.saveImage('test.nii', true)
    }

    function saveImagePng() {
        nv.saveScene('test.png')
    }

    return {
        nvInit,
        getVolumeMsg,
        changeView,
        changeClipPlane,
        show_OrientCube,
        show_3DHair,
        show_colorbar,
        show_ruler,
        changerigthclick,
        draw,
        setColorFill,
        setOpacity,
        changeColorMap,
        saveImageNii,
        saveImagePng,
        VolumeMsg,
        viewvalue,
        planevalue,
        value_OrientCube,
        value_3DHair,
        disabled,
        value_colorbar,
        value_ruler,
        rigthclick_option,
        ifdraw,
        iffill,
        pen_color,
        drawOpacity,
        colormaps,
        colormap,
        nvImgId,
        fileObject,
        addFileObject,
        removeFileObject,
        getFileObject
    }
})